// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: cluster.sql

package sqlc

import (
	"context"
	"database/sql"
)

const countClusters = `-- name: CountClusters :one
SELECT COUNT(*)
FROM clusters
`

func (q *Queries) CountClusters(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countClusters)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteCluster = `-- name: DeleteCluster :exec
DELETE FROM clusters
WHERE id = $1
`

func (q *Queries) DeleteCluster(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteCluster, id)
	return err
}

const getCluster = `-- name: GetCluster :one
SELECT id, name, psp_element, operational_model, platform, worker_type, is_gpu_worker, max_worker_count, worker_count_number, longhorn_storage, nfs_storage, reason, notes_text
FROM clusters
WHERE id = $1
`

func (q *Queries) GetCluster(ctx context.Context, id int32) (Cluster, error) {
	row := q.db.QueryRowContext(ctx, getCluster, id)
	var i Cluster
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PspElement,
		&i.OperationalModel,
		&i.Platform,
		&i.WorkerType,
		&i.IsGpuWorker,
		&i.MaxWorkerCount,
		&i.WorkerCountNumber,
		&i.LonghornStorage,
		&i.NfsStorage,
		&i.Reason,
		&i.NotesText,
	)
	return i, err
}

const getClusters = `-- name: GetClusters :many
SELECT id, name, psp_element, operational_model, platform, worker_type, is_gpu_worker, max_worker_count, worker_count_number, longhorn_storage, nfs_storage, reason, notes_text
FROM clusters
`

func (q *Queries) GetClusters(ctx context.Context) ([]Cluster, error) {
	rows, err := q.db.QueryContext(ctx, getClusters)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Cluster
	for rows.Next() {
		var i Cluster
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.PspElement,
			&i.OperationalModel,
			&i.Platform,
			&i.WorkerType,
			&i.IsGpuWorker,
			&i.MaxWorkerCount,
			&i.WorkerCountNumber,
			&i.LonghornStorage,
			&i.NfsStorage,
			&i.Reason,
			&i.NotesText,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const newCluster = `-- name: NewCluster :one
INSERT INTO clusters (
    name, psp_element, operational_model, platform, worker_type,
    is_gpu_worker, max_worker_count, worker_count_number, longhorn_storage,
    nfs_storage, reason, notes_text
)
VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12
)
RETURNING id, name, psp_element, operational_model, platform, worker_type, is_gpu_worker, max_worker_count, worker_count_number, longhorn_storage, nfs_storage, reason, notes_text
`

type NewClusterParams struct {
	Name              string
	PspElement        string
	OperationalModel  Operationalmodel
	Platform          Platform
	WorkerType        Workertype
	IsGpuWorker       bool
	MaxWorkerCount    int32
	WorkerCountNumber sql.NullInt64
	LonghornStorage   int64
	NfsStorage        sql.NullInt64
	Reason            string
	NotesText         sql.NullString
}

func (q *Queries) NewCluster(ctx context.Context, arg NewClusterParams) (Cluster, error) {
	row := q.db.QueryRowContext(ctx, newCluster,
		arg.Name,
		arg.PspElement,
		arg.OperationalModel,
		arg.Platform,
		arg.WorkerType,
		arg.IsGpuWorker,
		arg.MaxWorkerCount,
		arg.WorkerCountNumber,
		arg.LonghornStorage,
		arg.NfsStorage,
		arg.Reason,
		arg.NotesText,
	)
	var i Cluster
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PspElement,
		&i.OperationalModel,
		&i.Platform,
		&i.WorkerType,
		&i.IsGpuWorker,
		&i.MaxWorkerCount,
		&i.WorkerCountNumber,
		&i.LonghornStorage,
		&i.NfsStorage,
		&i.Reason,
		&i.NotesText,
	)
	return i, err
}

const updateCluster = `-- name: UpdateCluster :one
UPDATE clusters
SET
    name = $1, psp_element = $2, operational_model = $3, platform = $4,
    worker_type = $5, is_gpu_worker = $6, max_worker_count = $7, worker_count_number = $8,
    longhorn_storage = $9, nfs_storage = $10, reason = $11, notes_text = $12
WHERE id = $13
RETURNING id, name, psp_element, operational_model, platform, worker_type, is_gpu_worker, max_worker_count, worker_count_number, longhorn_storage, nfs_storage, reason, notes_text
`

type UpdateClusterParams struct {
	Name              string
	PspElement        string
	OperationalModel  Operationalmodel
	Platform          Platform
	WorkerType        Workertype
	IsGpuWorker       bool
	MaxWorkerCount    int32
	WorkerCountNumber sql.NullInt64
	LonghornStorage   int64
	NfsStorage        sql.NullInt64
	Reason            string
	NotesText         sql.NullString
	ID                int32
}

func (q *Queries) UpdateCluster(ctx context.Context, arg UpdateClusterParams) (Cluster, error) {
	row := q.db.QueryRowContext(ctx, updateCluster,
		arg.Name,
		arg.PspElement,
		arg.OperationalModel,
		arg.Platform,
		arg.WorkerType,
		arg.IsGpuWorker,
		arg.MaxWorkerCount,
		arg.WorkerCountNumber,
		arg.LonghornStorage,
		arg.NfsStorage,
		arg.Reason,
		arg.NotesText,
		arg.ID,
	)
	var i Cluster
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PspElement,
		&i.OperationalModel,
		&i.Platform,
		&i.WorkerType,
		&i.IsGpuWorker,
		&i.MaxWorkerCount,
		&i.WorkerCountNumber,
		&i.LonghornStorage,
		&i.NfsStorage,
		&i.Reason,
		&i.NotesText,
	)
	return i, err
}
