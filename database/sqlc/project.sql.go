// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: project.sql

package sqlc

import (
	"context"
)

const deleteProject = `-- name: DeleteProject :exec
DELETE FROM project
WHERE id = $1
`

func (q *Queries) DeleteProject(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteProject, id)
	return err
}

const getProject = `-- name: GetProject :one
SELECT id, name
FROM project
WHERE id = $1
`

func (q *Queries) GetProject(ctx context.Context, id int32) (Project, error) {
	row := q.db.QueryRowContext(ctx, getProject, id)
	var i Project
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getProjects = `-- name: GetProjects :many
SELECT id, name
FROM project
`

func (q *Queries) GetProjects(ctx context.Context) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, getProjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const newProject = `-- name: NewProject :one
INSERT INTO project (name)
VALUES ($1)
RETURNING id, name
`

func (q *Queries) NewProject(ctx context.Context, name string) (Project, error) {
	row := q.db.QueryRowContext(ctx, newProject, name)
	var i Project
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const updateProject = `-- name: UpdateProject :one
UPDATE project
SET name = $1
WHERE id = $2
RETURNING id, name
`

type UpdateProjectParams struct {
	Name string
	ID   int32
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) (Project, error) {
	row := q.db.QueryRowContext(ctx, updateProject, arg.Name, arg.ID)
	var i Project
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
